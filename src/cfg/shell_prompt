# file: shell_prompt

# my kinda prompt
#### for more info see...
####  * http://en.wikipedia.org/wiki/ANSI_escape_code
####  * http://tldp.org/HOWTO/Bash-Prompt-HOWTO/
####  * http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#VT100 Mode
# export PS1='\[\e]0;\u@\h:\w\a\]\n\[\e[32m\]\t \u@\h:\[\e[33m\]\w\[\e[0m\]\n\$ '
# export PS1="\[\e]0;\u@${HOSTNAME,,}:\w\a\]\n\[\e[32m\]\t \u@${HOSTNAME,,}:\[\e[33m\]\w\[\e[0m\]\n\$ "

## export CDPATH='.:~:~/MKSprojects/RFS/FCA:~/proj'

## _template='time user(at)host(colon)pwd(newline)(ltbracket)shell version(rtbracket) dollarsign '

safepathmunge ~/bin

case $THIS_SHELL in
  bash) e="\\e" ; n="\\n" ;;
  ksh)  e=''  ; n='
'  ; a='' ;;
  zsh)  e=''    ; n=''    ;;
  *)    e="-e-" ; n="-n"  ;;
esac

ereset='${e}[0m'
ecolon='${e}[37m'
eshell='${e}[33m'
case $THIS_ENV in
  PRD)
    eusrnode='${e}[91;40m' ; ## bright/bold red-fg; normal black-bg
    epwd='${e}[36;40m' ;     ## normal cyan-fg; normal black-bg
    etime='${e}[32;40m' ;;   ## normal green-fg; normal black-bg
  TST)
    eusrnode='${e}[32;40m' ; ## normal green-fg; black-bg
    epwd='${e}[36;40m' ;     ## normal cyan-fg; normal black-bg
    etime='${e}[35;40m' ;;   ## normal magenta-fg; normal black-bg
  DEV)
    eusrnode='${e}[32;40m' ; ## normal green-fg; black-bg
    epwd='${e}[35;40m' ;     ## normal magenta-fg; normal black-bg
    etime='${e}[36;40m' ;;   ## normal cyan-fg; normal black-bg
  UNK)
    eusrnode='${e}[32;40m' ; ## normal green-fg; black-bg
    epwd='${e}[36;40m' ;     ## normal cyan-fg; normal black-bg
    etime='${e}[35;40m' ;;   ## normal magenta-fg; normal black-bg
esac

## set local and remote prompts...
case $THIS_SHELL in
  bash)
    ## XS1="\n${eusrnode}`whoami`@`hostname`${ecolon}:${epwd}\\${PWD}${ereset}\n${eshell}[${THIS_SHELL} ${THIS_VERSION}]${ereset} $ "
    ## PS1=$(eval echo\ \"$XS1\")
    PS1="\[${e}]0;\u@\h:\w\a\]${n}\[\e[35;40m\]\t\[\e[32;40m\] \u@\h\[\e[37m\]:\[\e[36;40m\]\w\[\e[0m\]${n}\[\e[33m\][${THIS_SHELL} ${THIS_VERSION}]\[\e[0m\] $ "

    if [[ "$IS_REMOTE" == "1" ]] ; then
      PS1="\[${e}]0;\u@\h:\w\a\]${n}\[${e}[36m\]\t\[${e}[32m\] \u@\h\[${e}[37m\]:\[${e}[33m\]\w\[${e}[0m\]${n}\[${e}[33m\][${THIS_SHELL} ${THIS_VERSION}]\[\e[0m\] $ "
      if [[ "$THIS_ENV" == "PRD" ]] ; then
        PS1="\[${e}]0;\u@\h:\w\a\]${n}\[${e}[32m\]\t\[${e}[91m\] \u@\h\[${e}[37m\]:\[${e}[36m\]\w\[${e}[0m\]${n}\[${e}[33m\][${THIS_SHELL} ${THIS_VERSION}]\[\e[0m\] $ "
      fi
    fi
    ;;
  ksh)
    case $THIS_VERSION in
      "88"|"93") PS1="
${eusrnode}`whoami`@`hostname`${ecolon}:${epwd}\${PWD}${ereset}
${eshell}[${THIS_SHELL} ${THIS_VERSION}]${ereset} $ " ;;
    #   "93") PS1="${e}]0;\u@\h:\w\a
# ${e}[36m\`date +%T\`${e}[32m `whoami`@`hostname`${e}[37m:${e}[35m\${PWD}${e}[0m
# ${e}[33m[${THIS_SHELL} ${THIS_VERSION}]${e}[0m $ " ;;
    #   xx) ;;
    esac ;;
  zsh) ;; ## already set by .zshrc
  *) ;; ## some other prompt
esac


# ///////////////////////////////////////////////////////////////////////////
#  based on https://gist.github.com/skizzybiz/3789296
#    and then liberally "bobified" to suit my sense of neatness & aesthetics
# ///////////////////////////////////////////////////////////////////////////
# (LOCAL CONSTANTS) Define colors
RESET='\[\033[00m\]'

BKFG='\[\033[0;30m\]'    # black   foreground
RDFG='\[\033[0;31m\]'    # red     foreground
GNFG='\[\033[0;32m\]'    # green   foreground
YLFG='\[\033[0;33m\]'    # yellow  foreground
BLFG='\[\033[0;34m\]'    # blue    foreground
MGFG='\[\033[0;35m\]'    # magenta foreground
CYFG='\[\033[0;36m\]'    # cyan    foreground
GRFG='\[\033[0;37m\]'    # gray    foreground

BKFGUL='\[\033[4;30m\]'  # black   foreground, underline
RDFGUL='\[\033[4;31m\]'  # red     foreground, underline
GNFGUL='\[\033[4;32m\]'  # green   foreground, underline
YLFGUL='\[\033[4;33m\]'  # yellow  foreground, underline
BLFGUL='\[\033[4;34m\]'  # blue    foreground, underline
MGFGUL='\[\033[4;35m\]'  # magenta foreground, underline
CYFGUL='\[\033[4;36m\]'  # cyan    foreground, underline
GRFGUL='\[\033[4;37m\]'  # gray    foreground, underline

BKFGBD='\[\033[1;30m\]'  # black   foreground, bright
RDFGBD='\[\033[1;31m\]'  # red     foreground, bright
GNFGBD='\[\033[1;32m\]'  # green   foreground, bright
YLFGBD='\[\033[1;33m\]'  # yellow  foreground, bright
BLFGBD='\[\033[1;34m\]'  # blue    foreground, bright
MGFGBD='\[\033[1;35m\]'  # magenta foreground, bright
CYFGBD='\[\033[1;36m\]'  # cyan    foreground, bright
GRFGBD='\[\033[1;37m\]'  # gray    foreground, bright

BKBG='\[\033[40m\]'      # black   background
RDBG='\[\033[41m\]'      # red     background
GNBG='\[\033[42m\]'      # green   background
YLBG='\[\033[43m\]'      # yellow  background
BLBG='\[\033[44m\]'      # blue    background
MGBG='\[\033[45m\]'      # magenta background
CYBG='\[\033[46m\]'      # cyan    background
GRBG='\[\033[47m\]'      # gray    background

# SYMBOLS
SYMBUG='⍾ '
SYMDELTA='▲'
SYMBRANCH='〒'
SYMALIEN='👽'

function is_node_project {
  [[ -f ./package.json ]]
}

function get_node_version {
  [[ $(type -t nvm) ]] && printf "|node %s" "$(nvm current)"
  [[ $(type -t n  ) ]] && printf "|node %s/%s" $(node -v) $(npm -v)
}

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "Your branch is up to date" ]]; then
		cleandirty="$GRFG"
  elif [[ ${git_status} =~ "working directory clean" ]]; then
		cleandirty="$GRFGUL"
  elif [[ ${git_status} =~ "Untracked files" || ${git_status} =~ "Changes not staged" ]]; then
		cleandirty="$RDFGUL"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
		cleandirty="$GNFGUL"
  else
		cleandirty="$RDFG"
  fi

  # Get the name of the branch.
  branch_pattern="^On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

	if [[ "$branch" == "" ]] ; then
		branch="-none-"
	fi

  # Set the final branch string.
  BRANCH="${cleandirty}(#${branch})$RESET"
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
	## PROMPT_SYMBOL="⌘"
	PROMPT_SYMBOL="$"
  if test $1 -ne 0 ; then
    PROMPT_SYMBOL="$RDFG$PROMPT_SYMBOL$RESET"
  fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # echo "set_bash_prompt"
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the BRANCH variable.
	BRANCH=''
  if is_git_repository ; then
    set_git_branch
  fi

  NODEVER=''
  if is_node_project ; then
    NODEVER="$(get_node_version)"
  fi

  # Fill spaces between the left and right halves
  strippedbranch=`echo $BRANCH | sed 's|\\\\\\[[^]]*\\]||g'`
  ## lefthalf="`whoami`@`hostname -s` `pwd | sed "s|$HOME|~|"` $strippedbranch"
  ## righthalf=`date '+%a %b %d %T'`
  lefthalf="`whoami`@`hostname -s` `pwd | sed "s|$HOME|~|"` `date '+%T'`"
  righthalf=$strippedbranch
  let fillsize=${COLUMNS}-${#lefthalf}-${#righthalf}-2
  fill=`printf ' %.0s' {1..300}` # 300 spaces
  fill=${fill:0:$fillsize}

  # Set the bash prompt variable.
  PS1="\n$CYFG\t $GNFG\u@\h$RESET:$YLFG\w${BRANCH}\n\
$YLFG[$THIS_SHELL $THIS_VERSION${NODEVER}] ${RESET}${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
# ///////////////////////////////////////////////////////////////////////////

export PS1 LS_COLORS

# vim: set filetype=sh sws=2 sw=2 sts=2 ts=2 expandtab :

